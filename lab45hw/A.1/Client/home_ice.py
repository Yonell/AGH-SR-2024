# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `home.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module home
_M_home = Ice.openModule('home')
__name__ = 'home'

if 'coffeeType' not in _M_home.__dict__:
    _M_home.coffeeType = Ice.createTempClass()
    class coffeeType(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    coffeeType.ESPRESSO = coffeeType("ESPRESSO", 0)
    coffeeType.AMERICANO = coffeeType("AMERICANO", 1)
    coffeeType.CAPPUCCINO = coffeeType("CAPPUCCINO", 2)
    coffeeType.LATTE = coffeeType("LATTE", 3)
    coffeeType._enumerators = { 0:coffeeType.ESPRESSO, 1:coffeeType.AMERICANO, 2:coffeeType.CAPPUCCINO, 3:coffeeType.LATTE }

    _M_home._t_coffeeType = IcePy.defineEnum('::home::coffeeType', coffeeType, (), coffeeType._enumerators)

    _M_home.coffeeType = coffeeType
    del coffeeType

if '_t_CoffeeSeq' not in _M_home.__dict__:
    _M_home._t_CoffeeSeq = IcePy.defineSequence('::home::CoffeeSeq', (), _M_home._t_coffeeType)

if '_t_StringSeq' not in _M_home.__dict__:
    _M_home._t_StringSeq = IcePy.defineSequence('::home::StringSeq', (), IcePy._t_string)

if 'Busy' not in _M_home.__dict__:
    _M_home.Busy = Ice.createTempClass()
    class Busy(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::home::Busy'

    _M_home._t_Busy = IcePy.defineException('::home::Busy', Busy, (), False, None, ())
    Busy._ice_type = _M_home._t_Busy

    _M_home.Busy = Busy
    del Busy

_M_home._t_CoffeeMachine = IcePy.defineValue('::home::CoffeeMachine', Ice.Value, -1, (), False, True, None, ())

if 'CoffeeMachinePrx' not in _M_home.__dict__:
    _M_home.CoffeeMachinePrx = Ice.createTempClass()
    class CoffeeMachinePrx(Ice.ObjectPrx):

        def makeCoffee(self, type, context=None):
            return _M_home.CoffeeMachine._op_makeCoffee.invoke(self, ((type, ), context))

        def makeCoffeeAsync(self, type, context=None):
            return _M_home.CoffeeMachine._op_makeCoffee.invokeAsync(self, ((type, ), context))

        def begin_makeCoffee(self, type, _response=None, _ex=None, _sent=None, context=None):
            return _M_home.CoffeeMachine._op_makeCoffee.begin(self, ((type, ), _response, _ex, _sent, context))

        def end_makeCoffee(self, _r):
            return _M_home.CoffeeMachine._op_makeCoffee.end(self, _r)

        def makeCoffees(self, types, context=None):
            return _M_home.CoffeeMachine._op_makeCoffees.invoke(self, ((types, ), context))

        def makeCoffeesAsync(self, types, context=None):
            return _M_home.CoffeeMachine._op_makeCoffees.invokeAsync(self, ((types, ), context))

        def begin_makeCoffees(self, types, _response=None, _ex=None, _sent=None, context=None):
            return _M_home.CoffeeMachine._op_makeCoffees.begin(self, ((types, ), _response, _ex, _sent, context))

        def end_makeCoffees(self, _r):
            return _M_home.CoffeeMachine._op_makeCoffees.end(self, _r)

        def cancel(self, context=None):
            return _M_home.CoffeeMachine._op_cancel.invoke(self, ((), context))

        def cancelAsync(self, context=None):
            return _M_home.CoffeeMachine._op_cancel.invokeAsync(self, ((), context))

        def begin_cancel(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_home.CoffeeMachine._op_cancel.begin(self, ((), _response, _ex, _sent, context))

        def end_cancel(self, _r):
            return _M_home.CoffeeMachine._op_cancel.end(self, _r)

        def isBusy(self, context=None):
            return _M_home.CoffeeMachine._op_isBusy.invoke(self, ((), context))

        def isBusyAsync(self, context=None):
            return _M_home.CoffeeMachine._op_isBusy.invokeAsync(self, ((), context))

        def begin_isBusy(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_home.CoffeeMachine._op_isBusy.begin(self, ((), _response, _ex, _sent, context))

        def end_isBusy(self, _r):
            return _M_home.CoffeeMachine._op_isBusy.end(self, _r)

        def timeToFinish(self, context=None):
            return _M_home.CoffeeMachine._op_timeToFinish.invoke(self, ((), context))

        def timeToFinishAsync(self, context=None):
            return _M_home.CoffeeMachine._op_timeToFinish.invokeAsync(self, ((), context))

        def begin_timeToFinish(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_home.CoffeeMachine._op_timeToFinish.begin(self, ((), _response, _ex, _sent, context))

        def end_timeToFinish(self, _r):
            return _M_home.CoffeeMachine._op_timeToFinish.end(self, _r)

        def showOnDisplay(self, message, context=None):
            return _M_home.CoffeeMachine._op_showOnDisplay.invoke(self, ((message, ), context))

        def showOnDisplayAsync(self, message, context=None):
            return _M_home.CoffeeMachine._op_showOnDisplay.invokeAsync(self, ((message, ), context))

        def begin_showOnDisplay(self, message, _response=None, _ex=None, _sent=None, context=None):
            return _M_home.CoffeeMachine._op_showOnDisplay.begin(self, ((message, ), _response, _ex, _sent, context))

        def end_showOnDisplay(self, _r):
            return _M_home.CoffeeMachine._op_showOnDisplay.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_home.CoffeeMachinePrx.ice_checkedCast(proxy, '::home::CoffeeMachine', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_home.CoffeeMachinePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::home::CoffeeMachine'
    _M_home._t_CoffeeMachinePrx = IcePy.defineProxy('::home::CoffeeMachine', CoffeeMachinePrx)

    _M_home.CoffeeMachinePrx = CoffeeMachinePrx
    del CoffeeMachinePrx

    _M_home.CoffeeMachine = Ice.createTempClass()
    class CoffeeMachine(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::home::CoffeeMachine')

        def ice_id(self, current=None):
            return '::home::CoffeeMachine'

        @staticmethod
        def ice_staticId():
            return '::home::CoffeeMachine'

        def makeCoffee(self, type, current=None):
            raise NotImplementedError("servant method 'makeCoffee' not implemented")

        def makeCoffees(self, types, current=None):
            raise NotImplementedError("servant method 'makeCoffees' not implemented")

        def cancel(self, current=None):
            raise NotImplementedError("servant method 'cancel' not implemented")

        def isBusy(self, current=None):
            raise NotImplementedError("servant method 'isBusy' not implemented")

        def timeToFinish(self, current=None):
            raise NotImplementedError("servant method 'timeToFinish' not implemented")

        def showOnDisplay(self, message, current=None):
            raise NotImplementedError("servant method 'showOnDisplay' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_home._t_CoffeeMachineDisp)

        __repr__ = __str__

    _M_home._t_CoffeeMachineDisp = IcePy.defineClass('::home::CoffeeMachine', CoffeeMachine, (), None, ())
    CoffeeMachine._ice_type = _M_home._t_CoffeeMachineDisp

    CoffeeMachine._op_makeCoffee = IcePy.Operation('makeCoffee', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_home._t_coffeeType, False, 0),), (), None, (_M_home._t_Busy,))
    CoffeeMachine._op_makeCoffees = IcePy.Operation('makeCoffees', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_home._t_CoffeeSeq, False, 0),), (), None, (_M_home._t_Busy,))
    CoffeeMachine._op_cancel = IcePy.Operation('cancel', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), None, ())
    CoffeeMachine._op_isBusy = IcePy.Operation('isBusy', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_bool, False, 0), ())
    CoffeeMachine._op_timeToFinish = IcePy.Operation('timeToFinish', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_float, False, 0), ())
    CoffeeMachine._op_showOnDisplay = IcePy.Operation('showOnDisplay', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())

    _M_home.CoffeeMachine = CoffeeMachine
    del CoffeeMachine

if 'lightMode' not in _M_home.__dict__:
    _M_home.lightMode = Ice.createTempClass()
    class lightMode(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    lightMode.BLINK = lightMode("BLINK", 0)
    lightMode.FADE = lightMode("FADE", 1)
    lightMode.SOLID = lightMode("SOLID", 2)
    lightMode.OFF = lightMode("OFF", 3)
    lightMode.RAINBOW = lightMode("RAINBOW", 4)
    lightMode._enumerators = { 0:lightMode.BLINK, 1:lightMode.FADE, 2:lightMode.SOLID, 3:lightMode.OFF, 4:lightMode.RAINBOW }

    _M_home._t_lightMode = IcePy.defineEnum('::home::lightMode', lightMode, (), lightMode._enumerators)

    _M_home.lightMode = lightMode
    del lightMode

if 'UnsupportedMode' not in _M_home.__dict__:
    _M_home.UnsupportedMode = Ice.createTempClass()
    class UnsupportedMode(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::home::UnsupportedMode'

    _M_home._t_UnsupportedMode = IcePy.defineException('::home::UnsupportedMode', UnsupportedMode, (), False, None, ())
    UnsupportedMode._ice_type = _M_home._t_UnsupportedMode

    _M_home.UnsupportedMode = UnsupportedMode
    del UnsupportedMode

if 'color' not in _M_home.__dict__:
    _M_home.color = Ice.createTempClass()
    class color(object):
        def __init__(self, red=0.0, green=0.0, blue=0.0):
            self.red = red
            self.green = green
            self.blue = blue

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_home.color):
                return NotImplemented
            else:
                if self.red != other.red:
                    return False
                if self.green != other.green:
                    return False
                if self.blue != other.blue:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_home._t_color)

        __repr__ = __str__

    _M_home._t_color = IcePy.defineStruct('::home::color', color, (), (
        ('red', (), IcePy._t_float),
        ('green', (), IcePy._t_float),
        ('blue', (), IcePy._t_float)
    ))

    _M_home.color = color
    del color

if 'lightConfig' not in _M_home.__dict__:
    _M_home.lightConfig = Ice.createTempClass()
    class lightConfig(object):
        def __init__(self, mode=_M_home.lightMode.BLINK, intensity=0.0, color=Ice._struct_marker, durationUntilOff=0.0):
            self.mode = mode
            self.intensity = intensity
            if color is Ice._struct_marker:
                self.color = _M_home.color()
            else:
                self.color = color
            self.durationUntilOff = durationUntilOff

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_home.lightConfig):
                return NotImplemented
            else:
                if self.mode != other.mode:
                    return False
                if self.intensity != other.intensity:
                    return False
                if self.color != other.color:
                    return False
                if self.durationUntilOff != other.durationUntilOff:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_home._t_lightConfig)

        __repr__ = __str__

    _M_home._t_lightConfig = IcePy.defineStruct('::home::lightConfig', lightConfig, (), (
        ('mode', (), _M_home._t_lightMode),
        ('intensity', (), IcePy._t_float),
        ('color', (), _M_home._t_color),
        ('durationUntilOff', (), IcePy._t_float)
    ))

    _M_home.lightConfig = lightConfig
    del lightConfig

_M_home._t_LightFixture = IcePy.defineValue('::home::LightFixture', Ice.Value, -1, (), False, True, None, ())

if 'LightFixturePrx' not in _M_home.__dict__:
    _M_home.LightFixturePrx = Ice.createTempClass()
    class LightFixturePrx(Ice.ObjectPrx):

        def setConfig(self, config, context=None):
            return _M_home.LightFixture._op_setConfig.invoke(self, ((config, ), context))

        def setConfigAsync(self, config, context=None):
            return _M_home.LightFixture._op_setConfig.invokeAsync(self, ((config, ), context))

        def begin_setConfig(self, config, _response=None, _ex=None, _sent=None, context=None):
            return _M_home.LightFixture._op_setConfig.begin(self, ((config, ), _response, _ex, _sent, context))

        def end_setConfig(self, _r):
            return _M_home.LightFixture._op_setConfig.end(self, _r)

        def getConfig(self, context=None):
            return _M_home.LightFixture._op_getConfig.invoke(self, ((), context))

        def getConfigAsync(self, context=None):
            return _M_home.LightFixture._op_getConfig.invokeAsync(self, ((), context))

        def begin_getConfig(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_home.LightFixture._op_getConfig.begin(self, ((), _response, _ex, _sent, context))

        def end_getConfig(self, _r):
            return _M_home.LightFixture._op_getConfig.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_home.LightFixturePrx.ice_checkedCast(proxy, '::home::LightFixture', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_home.LightFixturePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::home::LightFixture'
    _M_home._t_LightFixturePrx = IcePy.defineProxy('::home::LightFixture', LightFixturePrx)

    _M_home.LightFixturePrx = LightFixturePrx
    del LightFixturePrx

    _M_home.LightFixture = Ice.createTempClass()
    class LightFixture(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::home::LightFixture')

        def ice_id(self, current=None):
            return '::home::LightFixture'

        @staticmethod
        def ice_staticId():
            return '::home::LightFixture'

        def setConfig(self, config, current=None):
            raise NotImplementedError("servant method 'setConfig' not implemented")

        def getConfig(self, current=None):
            raise NotImplementedError("servant method 'getConfig' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_home._t_LightFixtureDisp)

        __repr__ = __str__

    _M_home._t_LightFixtureDisp = IcePy.defineClass('::home::LightFixture', LightFixture, (), None, ())
    LightFixture._ice_type = _M_home._t_LightFixtureDisp

    LightFixture._op_setConfig = IcePy.Operation('setConfig', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_home._t_lightConfig, False, 0),), (), None, (_M_home._t_UnsupportedMode,))
    LightFixture._op_getConfig = IcePy.Operation('getConfig', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_home._t_lightConfig, False, 0), ())

    _M_home.LightFixture = LightFixture
    del LightFixture

_M_home._t_Config = IcePy.defineValue('::home::Config', Ice.Value, -1, (), False, True, None, ())

if 'ConfigPrx' not in _M_home.__dict__:
    _M_home.ConfigPrx = Ice.createTempClass()
    class ConfigPrx(Ice.ObjectPrx):

        def listLamps(self, context=None):
            return _M_home.Config._op_listLamps.invoke(self, ((), context))

        def listLampsAsync(self, context=None):
            return _M_home.Config._op_listLamps.invokeAsync(self, ((), context))

        def begin_listLamps(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_home.Config._op_listLamps.begin(self, ((), _response, _ex, _sent, context))

        def end_listLamps(self, _r):
            return _M_home.Config._op_listLamps.end(self, _r)

        def listCoffeeMachines(self, context=None):
            return _M_home.Config._op_listCoffeeMachines.invoke(self, ((), context))

        def listCoffeeMachinesAsync(self, context=None):
            return _M_home.Config._op_listCoffeeMachines.invokeAsync(self, ((), context))

        def begin_listCoffeeMachines(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_home.Config._op_listCoffeeMachines.begin(self, ((), _response, _ex, _sent, context))

        def end_listCoffeeMachines(self, _r):
            return _M_home.Config._op_listCoffeeMachines.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_home.ConfigPrx.ice_checkedCast(proxy, '::home::Config', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_home.ConfigPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::home::Config'
    _M_home._t_ConfigPrx = IcePy.defineProxy('::home::Config', ConfigPrx)

    _M_home.ConfigPrx = ConfigPrx
    del ConfigPrx

    _M_home.Config = Ice.createTempClass()
    class Config(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::home::Config')

        def ice_id(self, current=None):
            return '::home::Config'

        @staticmethod
        def ice_staticId():
            return '::home::Config'

        def listLamps(self, current=None):
            raise NotImplementedError("servant method 'listLamps' not implemented")

        def listCoffeeMachines(self, current=None):
            raise NotImplementedError("servant method 'listCoffeeMachines' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_home._t_ConfigDisp)

        __repr__ = __str__

    _M_home._t_ConfigDisp = IcePy.defineClass('::home::Config', Config, (), None, ())
    Config._ice_type = _M_home._t_ConfigDisp

    Config._op_listLamps = IcePy.Operation('listLamps', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_home._t_StringSeq, False, 0), ())
    Config._op_listCoffeeMachines = IcePy.Operation('listCoffeeMachines', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_home._t_StringSeq, False, 0), ())

    _M_home.Config = Config
    del Config

# End of module home
